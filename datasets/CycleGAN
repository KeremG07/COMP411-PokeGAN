{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"CycleGAN","provenance":[],"collapsed_sections":["wtyVpbPt3SAL","YvqTHV5O-Jjo","gzLjiEONvIPs","UjH8LZ34_f_C","SYzJZAKVsMZD","QsZbK_T5xQH_"],"mount_file_id":"136QXajpmBjk-JKCEdw9HVvW5pLsFUWn6","authorship_tag":"ABX9TyOBp/+XImSNPEwelf+7dMQn"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"TSwtbIn6xdl2"},"source":["# Import"]},{"cell_type":"code","metadata":{"id":"LlKsyOud3MpN"},"source":["import torch \n","import torch.nn as nn\n","import os\n","from torch.utils.data import Dataset\n","import numpy as np\n","from PIL import Image\n","from torchvision import transforms, utils, datasets \n","from tqdm import tqdm\n","import torch.optim as optim\n","from torchvision.utils import save_image\n","from torch.utils.data import DataLoader\n","import torchvision\n","import matplotlib.pyplot as plt\n","from torch.utils.data.sampler import SubsetRandomSampler\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QCL6tfFx1NlA"},"source":["# Drive"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B9lLjYk8Ei6x","executionInfo":{"status":"ok","timestamp":1622900609656,"user_tz":-180,"elapsed":5,"user":{"displayName":"ATA SAYIN","photoUrl":"","userId":"06814481638654216562"}},"outputId":"24d68e7c-783e-497b-c32a-05891400d1e8"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"3NLasrmwkVHx"},"source":["import gc\n","gc.collect()\n","torch.cuda.empty_cache()\n","DEVICE"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wtyVpbPt3SAL"},"source":["# Discriminator"]},{"cell_type":"code","metadata":{"id":"4tgEl4QE3QYx"},"source":["class Block(nn.Module):\n","    def __init__(self,in_channels,out_channels,stride):\n","        super().__init__()\n","        self.conv = nn.Sequential(\n","            nn.Conv2d(in_channels, out_channels, 4, stride, bias=True, padding = 1, padding_mode=\"reflect\"),\n","            nn.InstanceNorm2d(out_channels),\n","            nn.LeakyReLU(0.2),\n","        )\n","    def forward(self,x):\n","        return self.conv(x)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xuw6vY1I3bZC"},"source":["class Discriminator(nn.Module):\n","  def __init__(self, in_channels, features = [64, 128, 256, 512]):\n","    super().__init__()\n","    layers = []\n","    layers.append(nn.Conv2d(in_channels, features[0], kernel_size = 4, stride= 2, padding=1, padding_mode= \"reflect\"))\n","\n","    in_channels = features[0]\n","    for feature in features[1:]:\n","      layers.append(Block(in_channels, feature, stride = 1 if feature==features[-1] else 2))\n","      in_channels = feature\n","\n","    layers.append(nn.Conv2d(in_channels, 1, kernel_size=4, stride=1, padding=1, padding_mode=\"reflect\" ))\n","    self.model = nn.Sequential(*layers)\n","\n","  def forward(self,x):\n","    return torch.sigmoid(self.model(x))\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BAKhFwHM5Ty-","executionInfo":{"status":"ok","timestamp":1623583049691,"user_tz":-180,"elapsed":754,"user":{"displayName":"ATA SAYIN","photoUrl":"","userId":"06814481638654216562"}},"outputId":"0c23aa0b-1cb6-43c1-b1fc-9eb44406d179"},"source":["x = torch.randn((5,3,256,256))\n","model = Discriminator(in_channels=3)\n","preds = model(x)\n","print(preds.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["torch.Size([5, 1, 30, 30])\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"YvqTHV5O-Jjo"},"source":["# Generator\n","\n","##Â c7s1-64, d128, d256, R256, R256, R256, R256, R256, R256, u128, u64, c7s1-3"]},{"cell_type":"code","metadata":{"id":"aLGJK0wd-K-x"},"source":["class ConvBlock(nn.Module):\n","  def __init__(self, in_channels, out_channels, down = True, use_act = True, **kwargs):\n","    super().__init__()\n","\n","    self.conv = nn.Sequential(\n","        nn.Conv2d(in_channels, out_channels, padding_mode=\"reflect\", **kwargs) \n","        if down\n","        else nn.ConvTranspose2d(in_channels, out_channels, **kwargs),\n","        \n","        nn.InstanceNorm2d(out_channels),\n","       \n","        nn.ReLU(inplace=True) if use_act  else nn.Identity(),\n","    )\n","\n","  def forward(self, x):\n","    return self.conv(x)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ltqlWoBdeHhO"},"source":["class ResidualBlock(nn.Module):\n","  def __init__(self, channels):\n","    super().__init__()\n","\n","    self.conv = nn.Sequential(\n","        ConvBlock(channels,channels, kernel_size = 3, padding=1),\n","        ConvBlock(channels,channels, use_act=False, kernel_size = 3, padding=1)\n","    )\n","\n","  def forward(self, x):\n","    return x + self.conv(x)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lblHMlUgmjln"},"source":["class Generator(nn.Module):\n","  def __init__(self, img_size, num_features = 64, num_residuals=6):\n","    super().__init__()\n","\n","    layers = []\n","    # c7s1-64\n","    self.initial = nn.Sequential(\n","        nn.Conv2d(img_size, num_features, kernel_size=7, stride=1, padding=3, padding_mode=\"reflect\"),\n","        nn.InstanceNorm2d(num_features=num_features),\n","        nn.ReLU(inplace=True)\n","    )\n","    layers.append(self.initial)\n","    \n","    # d128, d256\n","    self.down_blocks = nn.Sequential(\n","        ConvBlock(num_features,num_features*2, kernel_size=3, stride=2,padding=1),\n","        ConvBlock(num_features*2,num_features*4, kernel_size=3, stride=2, padding=1)\n","    )\n","    layers.append(self.down_blocks)\n","\n","    # R256, R256, R256, R256, R256, R256,\n","    self.res_blocks = nn.Sequential(\n","       *[ResidualBlock(num_features*4) for _ in range(num_residuals)]\n","    )\n","    layers.append(self.res_blocks)  \n","    # u128, u64\n","    self.up_blocks = nn.Sequential(\n","        ConvBlock(num_features*4, num_features*2, down=False, kernel_size=3, stride=2, padding=1, output_padding=1),\n","        ConvBlock(num_features*2, num_features, down=False, kernel_size=3, stride=2, padding=1, output_padding=1)\n","    )\n","    layers.append(self.up_blocks)\n","\n","    # c7s1-3\n","    self.out_block = nn.Sequential(\n","        nn.Conv2d(num_features, 3, kernel_size=7, stride=1, padding=3, padding_mode=\"reflect\"),\n","        nn.InstanceNorm2d(num_features=3),\n","    )\n","    layers.append(self.out_block)\n","\n","    self.model = nn.Sequential(*layers)\n","\n","  def forward(self, x):\n","    return torch.tanh(self.model(x))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gzLjiEONvIPs"},"source":["# Dataset"]},{"cell_type":"code","metadata":{"id":"c2_HAcuhvJ-5"},"source":["class SourceTargetDataset(Dataset):\n","  def __init__(self, root_source, root_target, transform = None):\n","    self.root_source = root_source\n","    self.root_target = root_target\n","    self.transform = transform\n","    \n","    self.images_source = os.listdir(self.root_source)\n","    self.images_target = os.listdir(self.root_target)\n","\n","    self.len_source = len(self.images_source)\n","    self.len_target = len(self.images_target)\n","\n","    self.length_dataset = max(self.len_source,self.len_target)\n","\n","\n","  def __len__(self):\n","    return self.length_dataset \n","  \n","  def __getitem__(self, index):\n","    img_source = self.images_source[ index % self.len_source]\n","    img_target = self.images_target[ index % self.len_target]\n","\n","    path_source = os.path.join(self.root_source,img_source)\n","    path_target = os.path.join(self.root_target,img_target)\n","\n","    img_source = np.array(Image.open(path_source).convert(\"RGB\"))\n","    img_target = np.array(Image.open(path_target).convert(\"RGB\"))\n","\n","    if self.transform:\n","      img_source = self.transform(img_source)\n","      img_target = self.transform(img_target)\n","\n","    return img_source, img_target\n","\n","class TestDataset(Dataset):\n","  def __init__(self, root_source, transform = None):\n","    self.root_source = root_source\n","    self.transform = transform\n","\n","    self.images_source = os.listdir(self.root_source)\n","\n","    self.length_dataset = len(self.images_source)\n","\n","  def __len__(self):\n","    return self.length_dataset\n","  \n","  def __getitem__(self, index):\n","    img_source = self.images_source[ index ]\n","\n","    path_source = os.path.join(self.root_source,img_source)\n","\n","    img_source = np.array(Image.open(path_source).convert(\"RGB\"))\n","\n","    if self.transform:\n","      img_source = self.transform(img_source)\n","\n","    return img_source\n","  "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"kbaoOMD1Xn8n"},"source":["transform=transforms.Compose([\n","    transforms.ToTensor(),\n","    transforms.CenterCrop(128),\n"," ])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UjH8LZ34_f_C"},"source":["# Train "]},{"cell_type":"code","metadata":{"id":"6-uS6Pnj_hQk"},"source":["def train(epoch, disc_X, disc_Y, gen_X, gen_Y, loader, opt_disc, opt_gen, l1, mse, d_scaler, g_scaler):\n","  loop = tqdm(loader, leave = True, position=0)\n","  \n","  for idx, (x, y) in enumerate(loop):\n","    x = x.to(DEVICE)\n","    y = y.to(DEVICE)\n","   \n","   # Discriminator loss\n","    with torch.cuda.amp.autocast():\n","      # Discriminator - Y\n","      D_y_real = disc_Y(y)\n","      D_y_real_loss = mse(D_y_real, torch.ones_like(D_y_real))\n","\n","      fake_y = gen_Y(x)\n","      D_y_fake = disc_Y(fake_y.detach())\n","      D_y_fake_loss = mse(D_y_fake, torch.zeros_like(D_y_fake))\n","\n","      D_y_loss = D_y_real_loss + D_y_fake_loss\n","\n","\n","      # Discriminator - X\n","      D_x_real = disc_X(x)\n","      D_x_real_loss = mse(D_x_real, torch.ones_like(D_x_real))\n","\n","      fake_x = gen_X(y)\n","      D_x_fake = disc_X(fake_x.detach())\n","      D_x_fake_loss = mse(D_x_fake, torch.zeros_like(D_x_fake))\n","\n","      D_x_loss = D_x_real_loss + D_x_fake_loss\n","\n","      # Discriminator - Total\n","      D_loss = D_y_loss + D_x_loss \n","\n","      \n","      opt_disc.zero_grad()\n","      d_scaler.scale(D_loss).backward()\n","      d_scaler.step(opt_disc)\n","      d_scaler.update()\n","\n","    # Generator loss\n","    with torch.cuda.amp.autocast():\n","      # Adversarial Loss\n","      \n","      # L_GAN(G_Y, D_Y , X, Y) \n","      # = Eyâ¼pdata(y) [log D_Y(y)]\n","      # + Exâ¼pdata(x) [log(1 â D_Y(G_Y(x))]\n","      \n","      # L_GAN(G_X, D_X , Y, X) \n","      # = Exâ¼pdata(x) [log D_X(x)]\n","      # + Eyâ¼pdata(y) [log(1 â D_X(G_X(y))]\n","\n","      D_x_fake = disc_X(fake_x)\n","      D_y_fake = disc_Y(fake_y)\n","\n","      G_x_loss = mse(D_x_fake, torch.ones_like(D_x_fake))\n","      G_y_loss = mse(D_y_fake, torch.ones_like(D_y_fake))\n","\n","\n","      # Cycle Consistency Loss\n","      # L_cyc (G_Y, G_X)\n","      # = Exâ¼pdata(x) [|G_X(G_Y(x)) â x|_1]\n","      # + Eyâ¼pdata(y) [|G_Y(G_X(y)) â y|_1]\n","\n","      cycle_x = gen_X(fake_y)\n","      cycle_y = gen_Y(fake_x)\n","\n","      cycle_x_loss = l1(cycle_x,x)\n","      cycle_y_loss = l1(cycle_y,y)\n","\n","      cycle_loss = cycle_x_loss + cycle_y_loss\n","\n","      # Identity Loss\n","      # L_identity(G,F) \n","      # = Eyâ¼pdata(y)[|G_Y(y) â y|_1] \n","      # + Exâ¼pdata(x) [|G_X(x) â x|_1 ]\n","\n","      identity_x_loss = l1(gen_X(x),x)\n","      identity_y_loss = l1(gen_Y(y),y)\n","      \n","      identity_loss = identity_x_loss + identity_y_loss\n","\n","      # Total loss\n","      G_loss = G_x_loss + G_y_loss + cycle_loss * LAMBDA_CYCLE + identity_loss * LAMBDA_IDENTITY\n","\n","      opt_gen.zero_grad()\n","      g_scaler.scale(G_loss).backward()\n","      g_scaler.step(opt_gen)\n","      g_scaler.update()\n","\n","     \n","\n","  \n","      \n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XmZgS_QvuI35"},"source":["# Hyperparameters and PATHs"]},{"cell_type":"code","metadata":{"id":"rql-FSwVuIr-"},"source":["DEVICE = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n","LEARNING_RATE = 2e-4\n","BATCH_SIZE = 32\n","NUM_WORKERS = 2\n","NUM_EPOCHS = 15\n","LAMBDA_CYCLE = 10\n","LAMBDA_IDENTITY = 5"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7yNi3RIknGYE"},"source":["# X DATA\n","SOURCE_DIR = \"/content/drive/MyDrive/Dersler/COMP447/Project/Data/SourceData_X/resized_images\"\n","\n","# Y DATA\n","MIYA_DIR = \"/content/drive/MyDrive/Dersler/COMP447/Project/Data/TargetData_Y/Miyazaki/miyazaki_frames\"\n","LEGO_DIR=\"/content/drive/MyDrive/Dersler/COMP447/Project/Data/TargetData_Y/Lego/aaa\"\n","LALOUX_DIR=\"/content/drive/MyDrive/Dersler/COMP447/Project/Data/TargetData_Y/Laloux/laloux_frames\"\n","\n","# MODELS\n","MIYA_MODEL_DIR= \"/content/drive/MyDrive/Dersler/COMP447/Project/CycleGAN/load_models/Miyazaki/\"\n","LEGO_MODEL_DIR = \"/content/drive/MyDrive/Dersler/COMP447/Project/CycleGAN/load_models/Lego/\"\n","LALOUX_MODEL_DIR = \"/content/drive/MyDrive/Dersler/COMP447/Project/CycleGAN/load_models/Laloux/\"\n","\n","# TEST DATA \n","TEST_DIR_FOREST = \"/content/drive/MyDrive/Dersler/COMP447/Project/Data/Test/forest_test\"\n","TEST_DIR_GLACIER = \"/content/drive/MyDrive/Dersler/COMP447/Project/Data/Test/glacier_test\"\n","TEST_DIR_MOUNTAIN = \"/content/drive/MyDrive/Dersler/COMP447/Project/Data/Test/mountain_test\"\n","TEST_DIR_SEA = \"/content/drive/MyDrive/Dersler/COMP447/Project/Data/Test/sea_test\"\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FijBUi4eilvO"},"source":["# Main"]},{"cell_type":"code","metadata":{"id":"RSZkTNb9zIda"},"source":["def main(disc_X,disc_Y,gen_Y,gen_X,TARGET_DIR,MODEL_CHECK_DIR):\n","    torch.manual_seed(130)\n","\n","    opt_disc = optim.Adam(\n","        list(disc_X.parameters()) + list(disc_Y.parameters()),\n","        lr=LEARNING_RATE,\n","        betas=(0.5, 0.999),\n","    )\n","    \n","    opt_gen = optim.Adam(\n","        list(gen_Y.parameters()) + list(gen_X.parameters()),\n","        lr=LEARNING_RATE,\n","        betas=(0.5, 0.999),\n","    )\n","\n","    L1 = nn.L1Loss()\n","    mse = nn.MSELoss()\n","\n","    dataset = SourceTargetDataset(\n","        root_source=SOURCE_DIR, \n","        root_target=TARGET_DIR, \n","        transform=transform\n","    )\n","    \n","\n","    loader = DataLoader(\n","        dataset,\n","        batch_size=BATCH_SIZE,\n","        shuffle=True,\n","        #sampler=SubsetRandomSampler(indices),\n","        num_workers=NUM_WORKERS,\n","        pin_memory=True\n","    )\n","\n","    g_scaler = torch.cuda.amp.GradScaler()\n","    d_scaler = torch.cuda.amp.GradScaler()\n","\n","    for epoch in range(NUM_EPOCHS):\n","      print(f\"\\nEpoch #{epoch}\\n\")\n","      train(epoch, disc_X, disc_Y, gen_X, gen_Y, loader, opt_disc, opt_gen, L1, mse, d_scaler, g_scaler)\n","      torch.save(gen_X.state_dict(), MODEL_CHECK_DIR + 'generator_X_param.pkl')\n","      torch.save(gen_Y.state_dict(), MODEL_CHECK_DIR + 'generator_Y_param.pkl')\n","      torch.save(disc_X.state_dict(), MODEL_CHECK_DIR + 'discriminator_X_param.pkl')\n","      torch.save(disc_Y.state_dict(), MODEL_CHECK_DIR + 'discriminator_Y_param.pkl')\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"AECDrqqenlqC"},"source":["disc_X = Discriminator(in_channels=3).to(DEVICE)\n","disc_Y = Discriminator(in_channels=3).to(DEVICE)\n","gen_Y = Generator(img_size=3, num_residuals=6).to(DEVICE)\n","gen_X = Generator(img_size=3, num_residuals=6).to(DEVICE)\n","\n","disc_X.load_state_dict(torch.load(LALOUX_MODEL_DIR+\"discriminator_X_param.pkl\"))\n","disc_Y.load_state_dict(torch.load(LALOUX_MODEL_DIR+\"discriminator_Y_param.pkl\"))\n","gen_X.load_state_dict(torch.load(LALOUX_MODEL_DIR+\"generator_X_param.pkl\"))\n","gen_Y.load_state_dict(torch.load(LALOUX_MODEL_DIR+\"generator_X_param.pkl\"))\n","\n","\n","main(disc_X,disc_Y,gen_Y,gen_X,LALOUX_DIR,LALOUX_MODEL_DIR)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hetOC9ockcO4"},"source":["# Test"]},{"cell_type":"code","metadata":{"id":"YoqRi8WjZigN"},"source":["test_dataset_f = TestDataset(\n","    root_source=TEST_DIR_FOREST,\n","    transform = transform,\n",")\n","\n","test_loader = DataLoader(\n","        test_dataset_f,\n","        batch_size=1,\n","        shuffle=False,\n","        pin_memory=True,\n","    )\n","\n","#disc_X = Discriminator(in_channels=3)\n","#disc_Y = Discriminator(in_channels=3)\n","gen_Y = Generator(img_size=3, num_residuals=6).to(DEVICE)\n","#gen_X = Generator(img_size=3, num_residuals=6)\n","\n","gen_Y.load_state_dict(torch.load( \"/content/drive/MyDrive/Dersler/COMP447/Project/CycleGAN/load_models/Laloux/generator_Y_param.pkl\"))\n","\n","with torch.no_grad():\n","  loop = tqdm(test_loader, leave=True,position = 0)\n","  for idx, x in enumerate(loop):\n","    x = x.to(DEVICE)\n","    save_image(gen_Y(x), f\"/content/drive/MyDrive/Dersler/COMP447/Project/CycleGAN/val_results/laloux/test{idx}.png\")\n","    "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E74Fd6HHHedi","executionInfo":{"status":"ok","timestamp":1623583984921,"user_tz":-180,"elapsed":240906,"user":{"displayName":"ATA SAYIN","photoUrl":"","userId":"06814481638654216562"}},"outputId":"5c3480c3-d7da-4410-cb93-640b64471f6d"},"source":["test_dataset_f = TestDataset(\n","    root_source=TEST_DIR_GLACIER,\n","    transform = transform,\n",")\n","\n","test_loader = DataLoader(\n","        test_dataset_f,\n","        batch_size=1,\n","        shuffle=False,\n","        pin_memory=True,\n","    )\n","\n","gen_Y = Generator(img_size=3, num_residuals=6).to(DEVICE)\n","\n","gen_Y.load_state_dict(torch.load( \"/content/drive/MyDrive/Dersler/COMP447/Project/DualGAN/load_models/Laloux/generator_Y_param.pkl\"))\n","\n","with torch.no_grad():\n","  loop = tqdm(test_loader, leave=True,position = 0)\n","  for idx, x in enumerate(loop):\n","    x = x.to(DEVICE)\n","    save_image(gen_Y(x), f\"/content/drive/MyDrive/Project/CycleGAN/val_results/laloux/glacier/laloux_glacier_test{idx}.png\")\n","    "],"execution_count":null,"outputs":[{"output_type":"stream","text":["100%|ââââââââââ| 553/553 [04:00<00:00,  2.30it/s]\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d3bvsZeT4xuu","executionInfo":{"status":"ok","timestamp":1623584214150,"user_tz":-180,"elapsed":229247,"user":{"displayName":"ATA SAYIN","photoUrl":"","userId":"06814481638654216562"}},"outputId":"e7544112-eafd-4b02-bd3d-6eaa407c43cb"},"source":["test_dataset_f = TestDataset(\n","    root_source=TEST_DIR_MOUNTAIN,\n","    transform = transform,\n",")\n","\n","test_loader = DataLoader(\n","        test_dataset_f,\n","        batch_size=1,\n","        shuffle=False,\n","        pin_memory=True,\n","    )\n","\n","gen_Y = Generator(img_size=3, num_residuals=6).to(DEVICE)\n","\n","gen_Y.load_state_dict(torch.load( \"/content/drive/MyDrive/Dersler/COMP447/Project/DualGAN/load_models/Laloux/generator_Y_param.pkl\"))\n","\n","with torch.no_grad():\n","  loop = tqdm(test_loader, leave=True,position = 0)\n","  for idx, x in enumerate(loop):\n","    x = x.to(DEVICE)\n","    save_image(gen_Y(x), f\"/content/drive/MyDrive/Project/CycleGAN/val_results/laloux/mountain/laloux_mountain_test{idx}.png\")\n","    "],"execution_count":null,"outputs":[{"output_type":"stream","text":["100%|ââââââââââ| 525/525 [03:49<00:00,  2.29it/s]\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E3EdQV1E4knL","executionInfo":{"status":"ok","timestamp":1623584433890,"user_tz":-180,"elapsed":219755,"user":{"displayName":"ATA SAYIN","photoUrl":"","userId":"06814481638654216562"}},"outputId":"b9e90d7d-d30a-4c57-e45f-531cf5194f4d"},"source":["test_dataset_f = TestDataset(\n","    root_source=TEST_DIR_SEA,\n","    transform = transform,\n",")\n","\n","test_loader = DataLoader(\n","        test_dataset_f,\n","        batch_size=1,\n","        shuffle=False,\n","        pin_memory=True,\n","    )\n","\n","gen_Y = Generator(img_size=3, num_residuals=6).to(DEVICE)\n","\n","gen_Y.load_state_dict(torch.load( \"/content/drive/MyDrive/Dersler/COMP447/Project/DualGAN/load_models/Laloux/generator_Y_param.pkl\"))\n","\n","with torch.no_grad():\n","  loop = tqdm(test_loader, leave=True,position = 0)\n","  for idx, x in enumerate(loop):\n","    x = x.to(DEVICE)\n","    save_image(gen_Y(x), f\"/content/drive/MyDrive/Project/CycleGAN/val_results/laloux/sea/laloux_sea_test{idx}.png\")\n","    "],"execution_count":null,"outputs":[{"output_type":"stream","text":["100%|ââââââââââ| 510/510 [03:39<00:00,  2.32it/s]\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"2kjwWz4QNjuM"},"source":["dataset = SourceTargetDataset(\n","        root_source=SOURCE_DIR, \n","        root_target=TARGET_DIR, \n","        transform=transform\n","    )\n","    \n","    \n","loader = DataLoader(\n","        dataset,\n","        batch_size=1,\n","        shuffle=False,\n","        #sampler=SubsetRandomSampler(indices),\n","        num_workers=NUM_WORKERS,\n","        pin_memory=True\n","    )"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"VR3g-RdANm6m"},"source":["i = iter(loader)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"bUBjR-5g5KM1"},"source":["img_source = self.images_source[ index % self.len_source]\n","    img_target = self.images_target[ index % self.len_target]\n","\n","    path_source = os.path.join(self.root_source,img_source)\n","    path_target = os.path.join(self.root_target,img_target)\n","\n","    img_source = np.array(Image.open(path_source).convert(\"RGB\"))\n","    img_target = np.array(Image.open(path_target).convert(\"RGB\"))\n","\n","    if self.transform:\n","      img_source = self.transform(img_source)\n","      img_target = self.transform(img_target)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KIbKggevNsmu"},"source":["path_source = \"/content/MaitresduTemps_down-Scene-358-03.jpg\"\n","y = transform(np.array(Image.open(path_source).convert(\"RGB\")))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wtyGcHjVN_Mv","colab":{"base_uri":"https://localhost:8080/","height":268},"executionInfo":{"status":"ok","timestamp":1622978363289,"user_tz":-180,"elapsed":712,"user":{"displayName":"ATA SAYIN","photoUrl":"","userId":"06814481638654216562"}},"outputId":"fcc39e93-3773-421c-a6bc-6146cd83f2a1"},"source":["plt.imshow( np.transpose(y, (1, 2, 0)))\n","\n","save_image(y, f\"/content/photos/laloux4.png\")"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"SYzJZAKVsMZD"},"source":["# Unzip"]},{"cell_type":"code","metadata":{"id":"-wVgwmmT6MHp"},"source":["!unzip \"/content/drive/MyDrive/Dersler/COMP447/Project/Data/TargetData_Y/Laloux/laloux_frames.zip\" -d \"/content/drive/MyDrive/Dersler/COMP447/Project/Data/TargetData_Y/Laloux\""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QsZbK_T5xQH_"},"source":["# Other"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pwAqr6kFwsZI","executionInfo":{"status":"ok","timestamp":1622320157689,"user_tz":-180,"elapsed":229,"user":{"displayName":"ATA SAYIN","photoUrl":"","userId":"06814481638654216562"}},"outputId":"8c8cae2f-e77d-444b-d050-69174d5649f1"},"source":[""],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["10"]},"metadata":{"tags":[]},"execution_count":31}]},{"cell_type":"code","metadata":{"id":"taESCxJmrh8r"},"source":["total_mean0,total_std0, total_mean1, total_std1 = NormStats(loader)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"qJ7wm5qQp_4N"},"source":["def NormStats(loader):\n","  psum0  = torch.tensor([0.0, 0.0, 0.0])\n","  psum_sq0 = torch.tensor([0.0, 0.0, 0.0])\n","\n","  psum1   = torch.tensor([0.0, 0.0, 0.0])\n","  psum_sq1 = torch.tensor([0.0, 0.0, 0.0])\n"," \n","\n","  for inputs in tqdm(loader,position=0):\n","    psum0  += inputs[0].sum(axis        = [0, 2, 3])\n","    psum_sq0 += (inputs[0] ** 2).sum(axis = [0, 2, 3])\n","\n","    psum1    += inputs[1].sum(axis        = [0, 2, 3])\n","    psum_sq1 += (inputs[1] ** 2).sum(axis = [0, 2, 3])\n","    \n","\n","  c = len(dataset) * 128 * 128\n","  total_mean0 = psum0 / c\n","  total_var0  = (psum_sq0 / c) - (total_mean0 ** 2)\n","  total_std0  = torch.sqrt(total_var0)\n","\n","  total_mean1 = psum1 / c\n","  total_var1  = (psum_sq1 / c) - (total_mean1 ** 2)\n","  total_std1  = torch.sqrt(total_var1)\n","  \n","  return total_mean0,total_std0, total_mean1, total_std1"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"AnQZOWkuzbmN"},"source":["np.random.randint(0,10)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"QdOJYK1_1Ef4"},"source":[""],"execution_count":null,"outputs":[]}]}